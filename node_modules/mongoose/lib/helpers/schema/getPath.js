'use strict';

/*!
 * Behaves like `Schema#path()`, except for it also digs into arrays without
 * needing to put `.0.`, so `getPath(schema, 'docArr.elProp')` works.
 */

<<<<<<< HEAD
const numberRE = /^\d+$/;

=======
>>>>>>> 519770fc49731418f8ee622bc8217bc1810136ed
module.exports = function getPath(schema, path) {
  let schematype = schema.path(path);
  if (schematype != null) {
    return schematype;
  }

  const pieces = path.split('.');
  let cur = '';
  let isArray = false;

  for (const piece of pieces) {
<<<<<<< HEAD
    if (isArray && numberRE.test(piece)) {
=======
    if (/^\d+$/.test(piece) && isArray) {
>>>>>>> 519770fc49731418f8ee622bc8217bc1810136ed
      continue;
    }
    cur = cur.length === 0 ? piece : cur + '.' + piece;

    schematype = schema.path(cur);
    if (schematype != null && schematype.schema) {
      schema = schematype.schema;
      cur = '';
<<<<<<< HEAD
      if (!isArray && schematype.$isMongooseDocumentArray) {
=======
      if (schematype.$isMongooseDocumentArray) {
>>>>>>> 519770fc49731418f8ee622bc8217bc1810136ed
        isArray = true;
      }
    }
  }

  return schematype;
};